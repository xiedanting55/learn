<template>
	<div>
		<!-- 横向滚动顶部选项卡 -->
		<sum-tabbar :tabIndex="tabIndex" :tabBars="tabBars" @tabchange="tabChange"></sum-tabbar>

		<!-- 横向滚动列表 -->
		<slider class="flex-1" :index="tabIndex" :infinite="false" @change="sliderChange">


			<list :show-scrollbar="false" :key="listIndex" v-for="(list,listIndex) in newsitems">

				<!-- 下拉刷新 -->
				<refresh class="w-100 flex-row j-center a-center" style="height: 80px;" @refresh="refresh"
					@pullingdown="pullingdown" :display="list.refreshShow">
					<text class="font-md text-muted">{{list.refreshText}}</text>
				</refresh>

				<template v-if="list.data.length > 0 && list.firstLoad === 'after'">
					<!-- 首页模板 -->
					<template v-if="tabBars[listIndex].template === 'index'">
						<cell v-for="(listItem,ItemIndex) in list.data" :key="ItemIndex">
							<!-- 轮播图组件 -->
							<sum-slider v-if="listItem.type ==='swiper'" :swipers="listItem.data" />
							<!-- 图标分类组件 -->
							<template v-if="listItem.type ==='indexnavs'">
								<sum-index-navs :resdata="listItem.data" />
								<divider />
							</template>
							<!-- 三图广告 -->
							<template v-if="listItem.type ==='threeAdv'">
								<sum-three-adv :item="listItem.data" />
								<divider />
							</template>
							<!-- 大图广告 -->
							<sum-one-adv v-if="listItem.type ==='oneAdv'" :item="listItem.data" />
							<!-- 公共列表组件 -->
							<div class="row w-100" v-if="listItem.type ==='list'">
								<block v-for="(item,index) in listItem.data" :key="index">
									<common-list :item="item" :index="index"></common-list>
								</block>
							</div>
						</cell>
					</template>
					<!-- 专题页 -->
					<template v-else-if="tabBars[listIndex].template === 'special'">
						<cell v-for="(listItem,ItemIndex) in list.data" :key="ItemIndex">
							<!-- 轮播图组件 -->
							<sum-slider v-if="listItem.type ==='swiper'" :swipers="listItem.data" />
							<!-- 图标分类组件 -->
							<template v-if="listItem.type ==='indexnavs'">
								<sum-index-navs :resdata="listItem.data" />
							</template>
							<!-- 公共列表组件 -->
							<div class="w-100" v-if="listItem.type ==='list'">
								<div class="p-2 border-bottom border-top">
									<text class="text-dark font-md font-weight">热卖爆品</text>
								</div>
								<div class="row w-100">
									<block v-for="(item,index) in listItem.data" :key="index">
										<common-list :item="item" :index="index"></common-list>
									</block>
								</div>
							</div>

						</cell>
					</template>
				</template>
				<!-- 加载中 -->
				<template v-else-if="list.firstLoad === 'ing'">
					<cell class="j-center a-center pt-5">
						<text class="font-md text-light-muted">加载中...</text>
					</cell>
				</template>
				<!-- 空数据 -->
				<template v-else>
					<cell class="j-center a-center pt-5">
						<text class="font-md text-light-muted">暂无数据</text>
					</cell>
				</template>
				<!-- 上拉加载 -->
				<loading class="w-100 j-center a-center" style="height: 70px;" @loading="onLoading"
					:display="list.loadingShow">
					<text class="text-muted font-md">Loading...</text>
				</loading>
			</list>
		</slider>

	</div>
</template>

<script>
	import $H from "@/common/lib/request.js"
	import sumTabbar from "@/components/index/nvue/sum-tabbar.nvue"
	import sumSlider from "@/components/index/nvue/sum-slider.nvue";
	import sumIndexNavs from "@/components/index/nvue/sum-index-navs.nvue";
	import divider from "@/components/common/divider.nvue";
	import sumThreeAdv from "@/components/index/nvue/sum-three-adv.nvue";
	import sumOneAdv from "@/components/index/nvue/sum-one-adv.nvue";
	import commonList from "@/components/common/common-list.nvue";
	// 获取当前窗口对象
	const currentWebview = plus.webview.currentWebview();
	export default {
		data() {
			return {
				tabIndex: 0,
				tabBars: [],
				newsitems: [],
			}
		},
		components: {
			sumTabbar,
			sumSlider,
			sumIndexNavs,
			divider,
			sumThreeAdv,
			sumOneAdv,
			commonList,
		},
		created() {
			// 监听当前窗口显示
			currentWebview.addEventListener('show', e => {
				console.log('indexShow')
			})
			// 初始化数据
			this.__init();
		},
		// 监听点击搜索框
		onNavigationBarSearchInputClicked() {
			uni.navigateTo({
				url: '../search/search',
			});
		},
		beforeDestroy() {
			// 移除监听事件
			currentWebview.removeEventListener('show', e => {})
		},
		methods: {
			async __init() {
				$H.get("/index_category/data").then(data => {
					console.log(data)
					this.tabBars = data.category; //初始化tabBars
					this.newsitems = this.setNewsItems(data); //初始化页面
				})
				// 第三种 await
				// let [err, res] = await uni.request({
				// 	url: 'http://ceshi3.dishait.cn/api/index_category/data',
				// 	method: 'GET'
				// });
				// if (err) {// 错误
				// 	return uni.showToast({
				// 		title: err.errMsg,
				// 		icon: 'none'
				// 	})
				// }
				// if (res.statusCode !== 200) {// 失败
				// 	return uni.showToast({
				// 		title: res.data.msg,
				// 		icon: 'none'
				// 	}) //错误信息
				// }
				// let data = res.data.data //成功
			},
			// 加载、刷新数据
			async addData(callback = false, refresh = false) {
				let e = this.tabIndex; //拿到当前索引
				let id = this.tabBars[e].id; // 拿到当前分类id
				let page = !refresh ? (Math.ceil(this.newsitems[e].data.length / 5) + 1) : 1; // 拿到当前分类的分页数
				if(page === 1 && this.newsitems[e].refreshShow === 'hide') {// 修改请求状态 首次加载中...
					this.newsitems[e].firstLoad = "ing";
				}
				// let [err, res] = await uni.request({
				// 	url: 'http://ceshi3.dishait.cn/api/index_category/' + id + '/data/' + page,
				// 	method: 'GET'
				// });
				// if(page === 1 && this.newsitems[e].refreshShow === 'hide') {// 修改请求状态 首次加载完成
				// 	this.newsitems[e].firstLoad = "after";
				// }
				// if (err) {// 错误
				// 	return uni.showToast({
				// 		title: err.errMsg,
				// 		icon: 'none'
				// 	})
				// }
				// if (res.statusCode !== 200) {// 失败
				// 	return uni.showToast({
				// 		title: res.data.msg,
				// 		icon: 'none'
				// 	}) //错误信息
				// }
				// let data = res.data.data; //成功
				$H.get(`/index_category/${id}/data/${page}`).then(data => {
					if(page === 1 && this.newsitems[e].refreshShow === 'hide') {// 修改请求状态 首次加载完成
						this.newsitems[e].firstLoad = "after";
					}
					this.newsitems[e].data = !refresh ? [...this.newsitems[e].data, ...data] : [...data]; // 赋值，渲染
					if (typeof callback === 'function') {// 执行回调函数
						callback();
					}
					if (data.length < 5) {// 没有更多了
						this.newsitems[e].loadingText = '没有更多了';
						return;
					}
				})
			},
			// 初始化页面
			setNewsItems(e) {
				let ary = [];
				let tablength = this.tabBars.length;// 拿到tabbars的长度，根据长度生成页面
				for (let i = 0; i < tablength; i++) {
					let firstLoad = i === 0 ? "after" : "before";
					let aryItem = {
						refreshShow: 'hide',
						refreshText: '下拉可以刷新',
						loadingShow: 'hide',
						data: [],
						firstLoad: firstLoad
					};
					if (this.tabBars[i].template === 'index') {// 首屏初始化数据
						aryItem.data = e.data;
					}
					ary.push(aryItem);
				}
				return ary;
			},
			// 点击选项卡触发事件
			tabChange(index) {
				this.tabIndex = index;
			},
			// 监听横向滚动列表事件
			sliderChange(e) {
				this.tabIndex = e.index
				if(this.newsitems[this.tabIndex].firstLoad === 'before') {
					this.addData();
				}
			},
			// 上拉加载事件
			onLoading() {
				// 存储当前索引
				var index = this.tabIndex
				this.newsitems[index].loadingShow = 'show';
				// 没有更多了
				if (this.newsitems[index].loadingText === '没有更多了') {
					uni.showToast({
						title: "没有更多了",
						icon: "none"
					})
					return this.newsitems[index].loadingShow = 'hide';
				}
				// 加载数据
				this.addData(() => {
					uni.showToast({
						title: "加载成功",
						icon: "none"
					})
					this.newsitems[index].loadingShow = 'hide';
				});
			},
			// 执行刷新
			refresh(e) {
				// 存储当前索引
				var index = this.tabIndex
				this.newsitems[index].refreshShow = 'show';
				this.newsitems[index].refreshText = '正在刷新...';
				// 请求刷新数据
				this.addData(() => {
					uni.showToast({
						title: "下拉刷新成功",
						icon: "none"
					});
					this.newsitems[index].refreshShow = 'hide';
					this.newsitems[index].refreshText = '下拉可以刷新';
				}, true);
			},
			// 判断下拉刷新状态
			pullingdown(e) {
				this.refreshText = e.pullingDistance > e.viewHeight ? '释放就能刷新咯' : '下拉可以刷新';
			}
		},
	}
</script>
<style src="@/common/zcm-main-nvue.css"></style>
<style>

</style>
